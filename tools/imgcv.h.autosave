#ifndef IMGCV_H
#define IMGCV_H

#include <opencv2/core.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/calib3d.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/core/utility.hpp>
#include <iostream>
// uncomment for common project
#include "tools/calibration/intrinsicparameters.h"
#include "opencv2/ximgproc.hpp"
#include "opencv2/ximgproc/disparity_filter.hpp"

class ImgCv : public cv::Mat
{

public:

    ImgCv();
    ImgCv(std::string, bool = false);
    ImgCv(cv::Mat const&, bool = false);
    ImgCv(cv::Mat const&, cv::Mat const&, bool = true);
    ~ImgCv();

    bool isStereo() const;

    cv::Mat getImg() const;

    /**
     * @brief ImgCv::getImgL : Get the left side of a stereo image
     * @return  the left image
     */
    cv::Mat getImgL() const;

    /**
     * @brief ImgCv::getImgR : Get the right side of an image
     * @return the right image
     */
    cv::Mat getImgR() const;

    /**
     * @brief ImgCv::getDisparityMap
     * @return  the disparity map
     */
    cv::Mat getDisparityMap();

    /**
     * @brief ImgCv::getDepthMap
     * @param TProjectionMat The matrix containing the intrinsec and extrinsec parameters of the camera
     * @return the depth map
     */
    cv::Mat getDepthMap(cv::Mat &TProjectionMat);

    void setImg(cv::Mat const&img, bool isStereo);
    void setImg(cv::Mat const&imgL, cv::Mat const&imgR);

    /**
     * @brief 'Cut' an image in two new image of width/2
     * @param cv::Mat Image that will be splitted in two
     * @return nothing but store the result in two pointers
     */
    void static split(cv::Mat &img, cv::Mat&imgL, cv::Mat&imgR);

    /** static version of the method
     * @brief Convert an image following the laplace algorithm
     * @param Image to convert
     * @return The parameters converted with laplace algorithm
     */
    cv::Mat static contour_laplace(cv::Mat const&);

    /**
    * @brief Convert an image following the laplace algorithm
    * @return The parameters converted with laplace algorithm
    */
    cv::Mat contour_laplace() const;

    /** static version of the method
     * @brief Convert an image following the sobel algorithm
     * @param Image to convert
     * @return The parameters converted with sobel algorithm
     */
    cv::Mat static contour_sobel(cv::Mat const& img);

    /**
     * @brief convert an image following the sobel algorithm
     * @return The parameters converted with sobel algorithm
     */
    cv::Mat contour_sobel() const;

    /**
     * @brief Display a disparity map using sbm parameters
     * @return The disparity map using sbm and the left and right image og the object
     */
    cv::Mat sbm(size_t const& IO_numberOfDisparities= 144, size_t const& IO_SADWindowSize= 9) const;

    cv::Mat sbm(size_t const &IO_minDisparity, size_t const &IO_numberOfDisparities,  size_t const &IO_SADWindowSize, const int &IO_disp12MaxDif,
                   const size_t &IO_preFilterCap, const size_t &IO_uniquenessRatio, const size_t &IO_speckleWindowSize,
                   const size_t &IO_speckleRange, const size_t &IO_textureTreshold, const size_t &IO_tresholdFilter) const;
    /**
     * @brief Generate the disparity map from two cv::mat pointer of a stereo image
     * &param size_t
     * @return disparity map
     */
    cv::Mat disparity_map_SGBM(const size_t &IO_minDisparity, const size_t &IO_numberOfDisparities, const size_t &IO_SADWindowSize,
                               const size_t &IO_P1, const size_t &IO_P2, const int &IO_disp12MaxDif,
                               const size_t &IO_preFilterCap, const size_t &IO_uniquenessRatio, const size_t &IO_speckleWindowSize,
                               const size_t &IO_speckleRange, const int &IO_full_scale) const;

    /**
     * @brief disparity_post_filtering
     * @return the post_filtered disparity map using SBM
     */
    cv::Mat disparity_post_filtering(size_t const &IO_minDisparity, size_t const &IO_numberOfDisparities,  size_t const &IO_SADWindowSize, const int &IO_disp12MaxDif,
                                     const size_t &IO_preFilterCap, const size_t &IO_uniquenessRatio, const size_t &IO_speckleWindowSize,
                                     const size_t &IO_speckleRange, const size_t &IO_textureTreshold, const size_t &IO_tresholdFilter);

    /**
     * @brief disparity_post_filtering
     * @return the post_filtered disparity map using SGBM
     */
    cv::Mat disparity_post_filtering(const size_t &IO_minDisparity, const size_t &IO_numberOfDisparities, const size_t &IO_SADWindowSize,
                                     const size_t &IO_P1, const size_t &IO_P2, const int &IO_disp12MaxDif,
                                     const size_t &IO_preFilterCap, const size_t &IO_uniquenessRatio, const size_t &IO_speckleWindowSize,
                                     const size_t &IO_speckleRange, const int &IO_full_scale);

    /**
     * @brief ImgCv::depthMap :  Compute the depth map using the disparity and the camera parameters\n
     * @param disparityMap Tje dosparity map
     * @param dispToDepthMatrix The matrix containing the intrinsec and extrinsec parameters of the camera
     * @return the depth map
     */
    cv::Mat static depthMap(cv::Mat const& disparityMap, cv::Mat &dispToDepthMatrix);

    /**
     * @brief depthMapInterpreter : detect the presence of a personne from the image and compute his distance from
     * the source.
     * @param image the left image of the stereo image which allow the detection of a person.
     *  if no human is found the function return [0, 0, 0]
     * @param disparityMap the coresponding disparity of the stereo image.
     * @param depthMap the coresponding depth map of the stereo image.
     * @return a 1 * 4 matrix with the position of the human in the image and is distance from the source:
     *      [vx: position x of the human,
     *       vy: position y of the human,
     *      theta: the rotation angle of the position of vx, vy and the orthonormal basis,
     *      d: distance of the human from the source]
     */
    cv::Mat static depthMapInterpreter(cv::Mat image, cv::Mat const& disparityMap, cv::Mat &depthMap);

    ImgCv static rectifiedImage(ImgCv &distortedImage, IntrinsicParameters const&paramL
                         , IntrinsicParameters const&paramR,
                         cv::Mat const&R, cv::Mat const&T);

    /**
     * @brief ImgCv::rectifiedImage
     * @param distortedImage the image to undistort
     * @param dist_coeffsL left parameters of the camera to undistort the pict
     * @param camera_matrixL left parameters of the camera to undistort the pict
     * @param dist_coeffsR right parameters of the camera to undistort the pict
     * @param camera_matrixR right parameters of the camera to undistort the pict
     * @param R rotation parameters of the camera to undistort the pict
     * @param T translation parameters of the camera to undistort the pict
     * @return the rectified image
     */
    ImgCv static rectifiedImage(ImgCv &distortedImage, cv::Mat const&dist_coeffsL, cv::Mat const&camera_matrixL,
                         cv::Mat const&dist_coeffsR, cv::Mat const&camera_matrixR,
                         cv::Mat const&R, cv::Mat const&T);

    /**
     * @brief ImgCv::rectifiedImage
     * @param distortedImage the image to undistort
     * @param outFile the output file with the parameters to undistort
     * @return the rectified image
     */
    ImgCv static rectifiedImage(ImgCv &distortedImage, std::string const& outFile);

    cv::Mat static getDispToDepthMat(std::string const& outFile);
    Mat static orbDetection(const Mat &firstImage, const Mat &secondImage);
private:

    bool stereo;

};

#endif // IMGCV_H
